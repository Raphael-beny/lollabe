package br.com.lollabe.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import javax.imageio.ImageIO;

import br.com.lollabe.model.Produto;
import br.com.lollabe.repository.ProdutoRepository;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/cadastro")
public class ProdutoController {

	@Autowired
	private ProdutoRepository produtoRepository;
	
	@GetMapping
	public List<Produto> listaProdutos(){
		return produtoRepository.findAll();
	}
	
	public byte[] fotoSalva;
	

	@GetMapping("/{id}")
	public Optional<Produto> buscarColaborador(@PathVariable Long	id){
		return produtoRepository.findById(id);
	}
	
	@PostMapping("/upload")
	public void mandarFotoPraLaco() {
		try {
			byte[] foto = null;
			BufferedImage imagem = ImageIO.read(new File("C:/dev/projeto-vue/novo-vue/src/img/3.jpg"));
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(imagem, "jpg", baos);
			foto = baos.toByteArray();
			Produto produto = new Produto();
			produto.setCodigo(508);
			produto.setDescricao("aa");
			produto.setNome("Mariazinha");
			produto.setPreco(10);
			produto.setFoto(foto);
			fotoSalva = produto.getFoto();
			produtoRepository.save(produto);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Produto salvarProduto(@RequestBody Produto produto) {
		try {
			byte[] foto = null;
			BufferedImage imagem = ImageIO.read(new File(produto.getFoto().toString()));
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(imagem, "jpg", baos);
			foto = baos.toByteArray();
			produto.setFoto(foto);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return produtoRepository.save(produto);
	}
	
	
	@DeleteMapping
	public void deletarProduto(@RequestBody Produto produto) {
		produtoRepository.delete(produto);
	}
	
	@PutMapping
	public Produto atualizarProduto(@RequestBody Produto produto) {
		return produtoRepository.save(produto);
	}
	
	@DeleteMapping("/{id}")
	public void deletarProdutoPorId(@PathVariable Long id){
		produtoRepository.deleteById(id);
	}
	
	@PutMapping("/{id}")
	public Produto atualizarProdutoPorId(@PathVariable Long id, @RequestBody Produto produto) {
		produto.setId(id);
		return produtoRepository.save(produto);
	}
	
	
}
